// <auto-generated />
using System;
using GFAPP.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GFAPP.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("GFAPP.Model.Authentication.Jwt.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("ClientId")
                        .HasMaxLength(50);

                    b.Property<string>("Token");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("APP.RefreshToken");
                });

            modelBuilder.Entity("GFAPP.Model.Authentication.Users.RegisterCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("CompanyInfoId");

                    b.Property<int>("RegistedCount");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInfoId");

                    b.ToTable("APP.RegisterCode");
                });

            modelBuilder.Entity("GFAPP.Model.Authentication.Users.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime?>("Birthday");

                    b.Property<int?>("CompanyInfoId")
                        .IsRequired();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("Sex");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CompanyInfoId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GFAPP.Model.CodeGenerator.CodeGeneratorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<long>("CurrentValue");

                    b.Property<string>("Format");

                    b.Property<int>("NumberLength");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("CodeGenerators");
                });

            modelBuilder.Entity("GFAPP.Model.Company.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CellphoneNumber");

                    b.Property<string>("CityCode");

                    b.Property<int>("CompanyType");

                    b.Property<string>("Contact");

                    b.Property<string>("LegalPerson");

                    b.Property<string>("Name");

                    b.Property<string>("TelephoneNumber");

                    b.Property<string>("UnifiedCode");

                    b.HasKey("Id");

                    b.HasIndex("CityCode");

                    b.ToTable("APP.CompanyInfo");
                });

            modelBuilder.Entity("GFAPP.Model.Districts.DistrictInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Name")
                        .HasMaxLength(60);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("GFAPP.Model.IndSludge.EleDuplicateInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("ActualQuantity");

                    b.Property<int?>("ActualQuantityPercentageOfMoisture");

                    b.Property<DateTime?>("ArrivedTime");

                    b.Property<string>("BackReason");

                    b.Property<int?>("CarryingCompanyId");

                    b.Property<string>("CarryingOperator");

                    b.Property<string>("CarryingOperatorMobilePhone");

                    b.Property<double?>("CarryingQuantity");

                    b.Property<DateTime?>("CarryingTime");

                    b.Property<int?>("CeneratedOperatorSignId");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DepartureTime");

                    b.Property<int?>("GeneratedCompanyId");

                    b.Property<string>("GeneratedOperatorMobilePhone");

                    b.Property<int?>("HandingWays");

                    b.Property<bool>("IsOutOfTheCity");

                    b.Property<bool?>("IsStored");

                    b.Property<string>("LicensePlateNumber");

                    b.Property<DateTime?>("ModifiedTime")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("ProcessedCompanyId");

                    b.Property<string>("ProcessedOperatorMobilePhone");

                    b.Property<int?>("ProcessedOperatorSignId");

                    b.Property<double?>("Quantity");

                    b.Property<int?>("QuantityPercentageOfMoisture");

                    b.Property<int?>("State");

                    b.Property<DateTime?>("TimeOfGeneratedSubmit");

                    b.Property<DateTime?>("TimeOfProcessedSubmit");

                    b.Property<string>("TransportLicenseId");

                    b.HasKey("Id");

                    b.HasIndex("CarryingCompanyId");

                    b.HasIndex("CeneratedOperatorSignId");

                    b.HasIndex("GeneratedCompanyId");

                    b.HasIndex("ProcessedCompanyId");

                    b.HasIndex("ProcessedOperatorSignId");

                    b.ToTable("EleDuplicates");
                });

            modelBuilder.Entity("GFAPP.Model.Record.RecordInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Event");

                    b.Property<DateTime>("OccurredTime");

                    b.Property<string>("Operator");

                    b.Property<int>("RelationshipId");

                    b.HasKey("Id");

                    b.HasIndex("RelationshipId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("GFAPP.Model.Signature.SignatureInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImgBase64");

                    b.HasKey("Id");

                    b.ToTable("SignatureInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GFAPP.Model.Authentication.Users.RegisterCode", b =>
                {
                    b.HasOne("GFAPP.Model.Company.CompanyInfo", "CompanyInfo")
                        .WithMany()
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFAPP.Model.Authentication.Users.UserInfo", b =>
                {
                    b.HasOne("GFAPP.Model.Company.CompanyInfo", "CompanyInfo")
                        .WithMany()
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFAPP.Model.Company.CompanyInfo", b =>
                {
                    b.HasOne("GFAPP.Model.Districts.DistrictInfo", "City")
                        .WithMany()
                        .HasForeignKey("CityCode")
                        .HasPrincipalKey("Code");
                });

            modelBuilder.Entity("GFAPP.Model.IndSludge.EleDuplicateInfo", b =>
                {
                    b.HasOne("GFAPP.Model.Company.CompanyInfo", "CarryingCompany")
                        .WithMany()
                        .HasForeignKey("CarryingCompanyId");

                    b.HasOne("GFAPP.Model.Signature.SignatureInfo", "CeneratedOperatorSign")
                        .WithMany()
                        .HasForeignKey("CeneratedOperatorSignId");

                    b.HasOne("GFAPP.Model.Company.CompanyInfo", "GeneratedCompany")
                        .WithMany()
                        .HasForeignKey("GeneratedCompanyId");

                    b.HasOne("GFAPP.Model.Company.CompanyInfo", "ProcessedCompany")
                        .WithMany()
                        .HasForeignKey("ProcessedCompanyId");

                    b.HasOne("GFAPP.Model.Signature.SignatureInfo", "ProcessedOperatorSign")
                        .WithMany()
                        .HasForeignKey("ProcessedOperatorSignId");
                });

            modelBuilder.Entity("GFAPP.Model.Record.RecordInfo", b =>
                {
                    b.HasOne("GFAPP.Model.IndSludge.EleDuplicateInfo", "EleDuplicate")
                        .WithMany("RecordList")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GFAPP.Model.Authentication.Users.UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GFAPP.Model.Authentication.Users.UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GFAPP.Model.Authentication.Users.UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GFAPP.Model.Authentication.Users.UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
